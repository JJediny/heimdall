<!-- Content Header (Page header) -->
<section class="content-header">
  <h1>
    Evaluation <%= @evaluation.profiles.keys.first %>
  </h1>
  <ol class="breadcrumb" data-turbolinks="false">
    <li><%= link_to ('<i class="fa fa-dashboard"> </i>Dashboard').html_safe, home_path %></li>
    <li><%= link_to 'Evaluations', evaluations_path %>
    <li class="active">Evaluation</li>
  </ol>
</section>

<!-- Main content -->
<section class="content container-fluid">
  <div class="row">
    <div class="col-md-4">
      <div class="box box-primary">
        <div class="box-header">
          <h3 class="box-title">Evaluation Information</h3>
        </div>
        <!-- /.box-header -->
        <div class="box-body">
          <p>
            <strong>Version:</strong>
            <%= @evaluation.version %>
          </p>

          <p>
            <strong>Other checks:</strong>
            <%= @evaluation.other_checks %>
          </p>
        </div>
      </div>
    </div>
    <div class="col-md-4">
      <div class="box box-primary">
        <div class="box-header">
          <h3 class="box-title">Platform</h3>
        </div>
        <!-- /.box-header -->
        <div class="box-body">
          <p>
            <strong>Name:</strong>
            <%= @evaluation.platform_name %>
          </p>

          <p>
            <strong>Release:</strong>
            <%= @evaluation.platform_release %>
          </p>
        </div>
      </div>
    </div>
    <div class="col-md-4">
      <div class="box box-primary">
        <div class="box-header">
          <h3 class="box-title">Statistics</h3>
        </div>
        <!-- /.box-header -->
        <div class="box-body">
          <p>
            <strong>Duration:</strong>
            <%= @evaluation.statistics_duration %>
          </p>
          <p>
            <strong>Uploaded:</strong>
            <%= @evaluation.created_at %>
          </p>
        </div>
      </div>
    </div>
  </div>

  <!-- Small boxes (Stat box) -->
  <div class="row">
    <div class="col-lg-2">
      <div class="box box-primary">
        <div class="box-header with-border">
          <h3 class="box-title">Compliance Level</h3>
        </div>
        <!-- /.box-header -->
        <div class="box-body">
          <div id="profile_gauge"></div>
        </div>
      </div>
    </div>

    <div class="col-xs-10">
      <div class="box box-primary">
        <div class="box-header">
          <h3 class="box-title">Findings</h3>
        </div>
        <!-- /.box-header -->
        <div class="box-body">
          <div class="col-lg-3 col-xs-6">
            <!-- small box -->
            <div class="small-box bg-green">
              <div class="inner">
                <h3><%= @evaluation.status_counts[:not_a_finding] %></h3>
                <p>Not a Finding</p>
              </div>
              <div class="icon padded">
                <i class="glyphicon glyphicon-ok-circle"></i>
              </div>
            </div>
          </div>
          <!-- ./col -->
          <div class="col-lg-3 col-xs-6">
            <!-- small box -->
            <div class="small-box bg-red">
              <div class="inner">
                <h3><%= @evaluation.status_counts[:open] %></h3>

                <p>Open</p>
              </div>
              <div class="icon padded">
                <i class="glyphicon glyphicon-remove-circle"></i>
              </div>
            </div>
          </div>
          <!-- ./col -->
          <div class="col-lg-3 col-xs-6">
            <!-- small box -->
            <div class="small-box bg-med-grey">
              <div class="inner">
                <h3><%= @evaluation.status_counts[:not_reviewed] %></h3>

                <p>Not Reviewed</p>
              </div>
              <div class="icon padded">
                <i class="glyphicon glyphicon-warning-sign"></i>
              </div>
            </div>
          </div>
          <!-- ./col -->
          <div class="col-lg-3 col-xs-6">
            <!-- small box -->
            <div class="small-box bg-aqua">
              <div class="inner">
                <h3><%= @evaluation.status_counts[:not_applicable] %></h3>

                <p>Not Applicable</p>
              </div>
              <div class="icon padded">
                <i class="glyphicon glyphicon-ban-circle"></i>
              </div>
            </div>
          </div>
          <!-- ./col -->
        </div>
        <!-- /.row -->
      </div>
    </div>
  </div>
  <div class="row">
    <div class="col-lg-4">
      <div class="box box-primary">
        <div class="box-header with-border">
          <h3 class="box-title">Control Status</h3>
        </div>
        <!-- /.box-header -->
        <div class="box-body">
          <div id="status_pie"></div>
        </div>
      </div>
    </div>
    <div class="col-lg-4">
      <div class="box box-primary">
        <div class="box-header with-border">
          <h3 class="box-title">Control Impact</h3>
        </div>
        <button id="clear_filters_button" type="button" class="btn btn-primary floating">Clear Filters</button>
        <!-- /.box-header -->
        <div class="box-body">
          <div id="severity_pie"></div>
        </div>
      </div>
    </div>
  </div>
  <div class="row">
    <div class="col-xs-12">
      <div class="box box-primary">
        <div class="box-header with-border">
          <h3 class="box-title">Controls</h3>
        </div>
        <!-- /.box-header -->
        <div class="box-body">
          <div id="chart"></div>
        </div>
      </div>
    </div>
  </div>
  <div class="row">
    <div class="col-xs-12">
      <div class="box box-primary">
        <div class="box-header">
          <h3 class="box-title">Profile Controls</h3>
        </div>
        <!-- /.box-header -->
        <div class="box-body" data-turbolinks="false">
          <table id="controls" class="table table-bordered table-striped">
            <thead>
            <tr>
              <th>Status</th>
              <th>Control ID</th>
              <th>Severity</th>
              <th>Impact</th>
              <th>NIST</th>
            </tr>
            </thead>
            <tbody>
              <% @evaluation.controls.each do |control_id, control| %>
              <% sym = @evaluation.status_symbol(control) %>
              <tr class="<%= control.category %> <%= status_label(sym) %>" id="<%= control.id %>">
                <td><button class="<%= status_btn(sym) %>" style="width:120px" onclick="show_details('<%= control.profile.id %>', '<%= control.id %>', '<%= @evaluation.id %>');"><%= status_label(sym) %></button></td>
                <td><%= link_to control_id, profile_control_path(control.profile.id, control.id) %></td>
                <td><%= control.tag 'severity' %></td>
                <td><%= control.impact %></td>
                <td><%= control.tag 'nist' %></td>
              </tr>
              <% end %>
            </tbody>
            <tfoot>
            <tr>
              <th>Status</th>
              <th>Control ID</th>
              <th>Severity</th>
              <th>Impact</th>
              <th>NIST</th>
            </tr>
          </tfoot>
          </table>
        </div>
      </div>
    </div>
  </div>
</section>
<!-- /.content -->
<script>

//var oTable = $('#controls').DataTable();
var cats = {"CAT I": true, "CAT II": true, "CAT III": true};
var stats = {"Not A Finding": true, "Not Applicable": true, "Open": true, "Not Reviewed": true};
var shown_id = null;
var loaded = null;
var compliance_count = 0.0;
var total_count = 0;

function show_details(profile_id, control_id, evaluation_id) {
  hsh = "#" + control_id;
  url = '/profiles/' + profile_id + '/controls/' + control_id + '/details/evaluation/' + evaluation_id;
  var tr = $(hsh);
  if ($('#details_row').length) {
    $('#details_row').remove();
  }
  if (control_id != shown_id) {
    shown_id = control_id;
    $.ajax(url, {
        success: function(data) {
          tr.after('<tr id="details_row" role="row"><td colspan="5" id="control_details">' + detailsData + '</td></tr>');
          Prism.highlightAll();
        },
        error: function() {
          console.log("Error occured");
        }
     });
   } else {
     shown_id = null;
   }
}

function clear_cat_filter(bool) {
  cats = {"CAT I": bool, "CAT II": bool, "CAT III" : bool};
}

function clear_stat_filter(bool) {
  stats = {"Not A Finding": bool, "Not Applicable": bool, "Open": bool, "Not Reviewed": bool};
}

function filter_table(category, status) {
  if (category) {
    clear_cat_filter(false);
    cats[category] = true;
  }
  if (status) {
    clear_stat_filter(false);
    stats[status] = true;
  }
}

$.fn.dataTableExt.afnFiltering.push(
    function( oSettings, aData, iDataIndex ) {
      var nTr = oSettings.aoData[ iDataIndex ].nTr;
      var cats_bool = true;
      var stats_bool = true;
      if ($(nTr).hasClass('CAT I')) {
        cats_bool = cats['CAT I'];
      } else if ($(nTr).hasClass('CAT II')) {
        cats_bool = cats['CAT II'];
      } else if ($(nTr).hasClass('CAT III')) {
        cats_bool = cats['CAT III'];
      }
      if ($(nTr).hasClass('Not A Finding')) {
        stats_bool = stats['Not A Finding'];
      } else if ($(nTr).hasClass('Not Applicable')) {
        stats_bool = stats['Not Applicable'];
      } else if ($(nTr).hasClass('Open')) {
        stats_bool = stats['Open'];
      } else if ($(nTr).hasClass('Not Reviewed')) {
        stats_bool = stats['Not Reviewed'];
      }
      return cats_bool && stats_bool;
    }
);

document.addEventListener("turbolinks:load", function() {
  if (loaded) {
    return;
  } else {
    loaded = true;
  }
  if($('[id^=controls_wrapper').length == 0) {
    $('#controls').DataTable({
      'paging'      : true,
      'lengthChange': false,
      'searching'   : true,
      'ordering'    : true,
      'info'        : true,
      'autoWidth'   : false
    });
  }

  $("#clear_filters_button").click(function() {
    if (currentDepth == 0) {
      document.getElementById("clear_filters_button").style.visibility = "hidden";
      clear_cat_filter(true);
      clear_stat_filter(true);
      reload_views(null);
    } else {
      alert("You must be at the top level of the chart to clear the filters");
    }
  });

  function accumulate_impact(d, low_r, high_r) {
    //console.log("accumulate_impact for " + d.name + ", low_r: " + low_r + ", high_r: " + high_r);
		count = (d._children = d.children)
		  // recursion step, note that p and v are defined by reduce
			? d.children.reduce(function(p, v) {im = accumulate_impact(v, low_r, high_r); return p + im; }, 0)
			: (d.impact >= low_r && d.impact <= high_r) ? d.value : 0
    //console.log("count = " + count);
    return count;
	}

  function accumulate_status(d, value) {
    //console.log("accumulate_impact for " + d.name + ", low_r: " + low_r + ", high_r: " + high_r);
		count = (d._children = d.children)
		  // recursion step, note that p and v are defined by reduce
			? d.children.reduce(function(p, v) {im = accumulate_status(v, value); return p + im; }, 0)
			: (d.status_value == value) ? d.value : 0
    //console.log("count = " + count);
    return count;
	}

  function draw_status_pie_chart(d)
  {
    var not_app = accumulate_status(d, 0.2);
    var not_rev = accumulate_status(d, 0.4);
    var not_find = accumulate_status(d, 0.6);
    var open = accumulate_status(d, 0.8);
    total_count = not_app + not_find + not_rev + open;
    compliance_count = ((not_find + not_app) / total_count) * 100;

    status_data = [
                  ['Not A Finding',  not_find],
                  ['Open',           open],
                  ['Not Reviewed',   not_rev],
                  ['Not Applicable', not_app]
                  ];
    c3.generate(
    {
      bindto: '#status_pie',
      data: {
          columns: status_data,
          type : 'donut',
          onclick: function (d) {
            if (currentDepth == 0) {
              document.getElementById("clear_filters_button").style.visibility = "visible";
              reload_views(null, d.id);
            }
          },
      },
      color:
      {
        pattern: ['rgb(137, 204, 81)', 'rgb(255, 0, 41)', 'rgb(140, 140, 140)', 'rgb(153, 204, 255)']
      },
      size:
      {
        height: 280
      },
      donut:
      {
        title: "Status",
        label:
        {
          format: function (value, ratio, id)
          {
            return d3.format()(value);
          }
      }
        }
    });
  }

  function draw_severity_pie_chart(d)
  {
    severity_data = [
              ['CAT I',   accumulate_impact(d, 0.7, 0.9)],
              ['CAT II',  accumulate_impact(d, 0.4, 0.6)],
              ['CAT III', accumulate_impact(d, 0.1, 0.3)],
          ];

    c3.generate(
    {
      bindto: '#severity_pie',

      data:
      {
        columns: severity_data,
        type : 'donut',
        onclick: function (d)
        {
          if (currentDepth == 0) {
            document.getElementById("clear_filters_button").style.visibility = "visible";
            reload_views(d.id, null);
          }
        },
      },
      color:
      {
          pattern: ['#003366', '#0080FF', '#99CCFF']
      },
      size:
      {
        height: 280
      },
      donut:
      {
        title: "Impact",
        label:
        {
          format: function (value, ratio, id)
          {
            return d3.format()(value);
          }
        }
      }
    });
  }

  function draw_compliance_pie_chart()
  {
    compliance_data = [
                  ['Compliance', compliance_count]
                  ];
    c3.generate({
      bindto: '#profile_gauge',

      data:
      {
        columns: compliance_data,
        type: 'gauge',
      },

      color:
      {
          pattern: ['#FF0000', '#F97600', '#F6C600', '#60B044'], // the three color levels for the percentage values.
          threshold: {
              values: [30, 40, 70, 100]
          }
      },
      size:
      {
          height: 120
      }
    });
  }

  // functions
	function initialize(root) {
		root.x = root.y = 0;
		root.dx = width;
		root.dy = height;
		root.depth = 0;
	}

  // Aggregate the values for internal nodes. This is normally done by the
  // treemap layout, but not here because of our custom implementation.
  // We also take a snapshot of the original children (_children) to avoid
  // the children being overwritten when when layout is computed.
  function accumulate(d) {
		return (d._children = d.children)
		  // recursion step, note that p and v are defined by reduce
			? d.value = d.children.reduce(function(p, v) {return p + accumulate(v); }, 0)
			: d.value
	}

  // Compute the treemap layout recursively such that each group of siblings
  // uses the same size (1×1) rather than the dimensions of the parent cell.
  // This optimizes the layout for the current zoom state. Note that a wrapper
  // object is created for the parent node for each group of siblings so that
  // the parent’s dimensions are not discarded as we recurse. Since each group
  // of sibling was laid out in 1×1, we must rescale to fit using absolute
  // coordinates. This lets us use a viewport to zoom.
  function layout(d) {
		if (d._children) {
		  // treemap nodes comes from the treemap set of functions as part of d3
		  treemap.nodes({_children: d._children});
		  d._children.forEach(function(c) {
			c.x = d.x + c.x * d.dx;
			c.y = d.y + c.y * d.dy;
			c.dx *= d.dx;
			c.dy *= d.dy;
			c.parent = d;
			// recursion
			layout(c);
		  });
		}
	}

  // Colors are based on the 'impact' at the leaf level. At higher levels, the
  // average impact of the children is calculated and used in the color range.
  // If there is no impact, the default color is grey
  function get_color(obj) {
    if ("status_value" in obj) {
      if (obj['status_value'] > 0) {
        return color(obj['status_value']);
      }
    }
    return "#bbbbbb";
  }

	function colorIncrements(d){
		return (colorDomain[colorDomain.length - 1] - colorDomain[0])/18*d + colorDomain[0];
	}

  // determines if white or black will be better contrasting color
	function getContrast50(hexcolor){
		return (parseInt(hexcolor.replace('#', ''), 16) > 0xffffff/3) ? 'black':'white';
	}

  function showCon(d) {
    console.log(d.name + ": impact: " + d.impact + ", value:"  + d.value);
    if (d._children) {
      d._children.forEach(function(c) {
        console.log(c.name + ": impact: " + c.impact + ", value:"  + c.value);
        // recursion
        showCon(c);
      });
    }
  }

  var obj = document.getElementById('chart');
	var divWidth = obj.offsetWidth;

	var margin = {top: 30, right: 0, bottom: 20, left: 0},
		width = divWidth -25,
		height = 540 - margin.top - margin.bottom,
    currentDepth = 0,
		formatNumber = d3.format(",%"),
		colorDomain = [0.2, 0.4, 0.6, 0.8],
    //colorRange = ['#dda8db', '#ebf2f7', '#9cbdd9'],
    colorRange = ['#99CCFF', '#8C8C8C', '#99CC66', '#FF0033'],
		//colorRange = ['green', 'orange', 'red'],
    severity = {'low': 1, 'medium': 2, 'high': 3},
		transitioning,
    root, dataset;

	// sets x and y scale to determine size of visible boxes
	var x = d3.scale.linear()
		.domain([0, width])
		.range([0, width]);

	var y = d3.scale.linear()
		.domain([0, height])
		.range([0, height]);

	// adding a color scale
	var color = d3.scale.linear()
		.domain(colorDomain)
		.range(colorRange);

  var treemap, svg, grandparent, legend;

  drawTreemap(null);
  //drawLegend();

  function reload_views(category, status) {
    drawTreemap(category, status);
    filter_table(category, status);
    $('#controls').DataTable().draw();
  }

  function drawTreemap(category, status) {
    d3.selectAll("svg").remove();
  	// introduce color scale here
  	treemap = d3.layout.treemap()
  		.children(function(d, depth) { return depth ? null : d._children; })
  		.sort(function(a, b) { return b.name.localeCompare(a.name); })
  		.ratio(height / width * 0.5 * (1 + Math.sqrt(5)))
  		.round(false);

  	svg = d3.select("#chart").append("svg")
  		.attr("width", width + margin.left + margin.right)
  		.attr("height", height + margin.bottom + margin.top)
  		.style("margin-left", -margin.left + "px")
  		.style("margin.right", -margin.right + "px")
  	  .append("g")
  		.attr("transform", "translate(" + margin.left + "," + margin.top + ")")
  		.style("shape-rendering", "crispEdges");

  	grandparent = svg.append("g")
  		.attr("class", "grandparent");

  	grandparent.append("rect")
  		.attr("y", -margin.top)
  		.attr("width", width)
  		.attr("height", margin.top);

  	grandparent.append("text")
  		.attr("x", 6)
  		.attr("y", 6 - margin.top)
  		.attr("dy", ".75em");

    loadTreemapData(category, status);
  }

  function loadTreemapData(category, status) {
    api_path = "<%= evaluation_nist_800_53_path(@evaluation) %>";
    if (category) {
      api_path += "/category/" + encodeURIComponent(category);
    }
    if (status) {
      api_path += "/status/" + encodeURIComponent(status);
    }
  	d3.json(api_path, function(data) {
      root = data
      initialize(root);
  	  accumulate(root);
      draw_status_pie_chart(root);
      draw_severity_pie_chart(root);
      draw_compliance_pie_chart();
  	  layout(root);
  	  display(root);

  	  function display(d) {
    		grandparent
    			.datum(d.parent)
    			.on("click", transition)
    		    .select("text")
    			.text(name(d))

    		// color header based on grandparent's impact
    		grandparent
    		  .datum(d.parent)
    		  .select("rect")
    		  .attr("fill", function(){ return get_color(d) })

    		var g1 = svg.insert("g", ".grandparent")
    			.datum(d)
    			.attr("class", "depth");

    		var g = g1.selectAll("g")
    			.data(d._children)
    		    .enter().append("g");

    		g.filter(function(d) { return d._children; })
    			.classed("children", true)
    			.on("click", transition);

    		g.selectAll(".child")
    			.data(function(d) { return d._children || [d]; })
    		  .enter().append("rect")
    			.attr("class", "child")
    			.call(rect);


    		g.append("rect")
    			.attr("class", "parent")
    			.call(rect)
    		  .append("title");

    		/* Adding a foreign object instead of a text object, allows for text wrapping */
    		g.append("foreignObject")
    				.call(rect)
    				/* open new window based on the json's URL value for leaf nodes */
    				/* Firefox displays this on top
    				.on("click", function(d) {
    					if(!d.children){
    						window.open(d.url);
    				}
    			})*/
    			.attr("class","foreignobj")
    			.append("xhtml:div")
    			.attr("dy", ".75em")
    			.html(function(d) { return (d.desc && width > 750) ? '' +
    				' <p class="title" style="color:' + getContrast50(get_color(d)) + '"> ' + d.name + '</p>' +
            ' <p style="color:' + getContrast50(get_color(d)) + '"> ' + d.desc + '</p>' :
            ' <p class="title" style="color:' + getContrast50(get_color(d)) + '"> ' + d.name + '</p>'
    				;})
    			.attr("class","textdiv"); //textdiv class allows us to style the text easily with CSS

    		function transition(d) {
          currentDepth = d.depth;
    		  if (transitioning || !d) return;
    		  transitioning = true;

    		  var g2 = display(d),
    			  t1 = g1.transition().duration(650),
    			  t2 = g2.transition().duration(650);

    		  // Update the domain only after entering new elements.
    		  x.domain([d.x, d.x + d.dx]);
    		  y.domain([d.y, d.y + d.dy]);

    		  // Enable anti-aliasing during the transition.
    		  svg.style("shape-rendering", null);

    		  // Draw child nodes on top of parent nodes.
    		  svg.selectAll(".depth").sort(function(a, b) { return a.depth - b.depth; });

    		  // Fade-in entering text.
    		  g2.selectAll("text").style("fill-opacity", 0);
    		  g2.selectAll("foreignObject div").style("display", "none"); /*added*/

    		  // Transition to the new view.
    		  t1.selectAll("text").call(text).style("fill-opacity", 0);
    		  t2.selectAll("text").call(text).style("fill-opacity", 1);
    		  t1.selectAll("rect").call(rect);
    		  t2.selectAll("rect").call(rect);

    		  /* Foreign object */
    		  t1.selectAll(".textdiv").style("display", "none"); /* added */
    		  t1.selectAll(".foreignobj").call(foreign); /* added */
    		  t2.selectAll(".textdiv").style("display", "block"); /* added */
    		  t2.selectAll(".foreignobj").call(foreign); /* added */

    		  // Remove the old node when the transition is finished.
    		  t1.remove().each("end", function() {
    			  svg.style("shape-rendering", "crispEdges");
    			  transitioning = false;
    		  });
    		}

    		return g;
  	  }

    	function text(text) {
    		text.attr("x", function(d) { return x(d.x) + 6; })
    		.attr("y", function(d) { return y(d.y) + 6; });
    	}

  	  function rect(rect) {
    		rect.attr("x", function(d) { return x(d.x); })
    			.attr("y", function(d) { return y(d.y); })
    			.attr("width", function(d) { return x(d.x + d.dx) - x(d.x); })
    			.attr("height", function(d) { return y(d.y + d.dy) - y(d.y); })
    			.attr("fill", function(d){return get_color(d);});
  	  }

  	  function foreign(foreign){ /* added */
  			foreign.attr("x", function(d) { return x(d.x); })
  			.attr("y", function(d) { return y(d.y); })
  			.attr("width", function(d) { return x(d.x + d.dx) - x(d.x); })
  			.attr("height", function(d) { return y(d.y + d.dy) - y(d.y); });
  		}

  	  function name(d) {
    		return d.parent
    			? d.name + (d.desc ? ": " + d.desc : "") + " -  Click header to zoom out"
    			: d.name + (d.desc ? ": " + d.desc : "")  + " -  Click in boxes zoom";
  	  }

  	  function nameSave(d) {
    		return d.parent
    			? name(d.parent) + " - " + d.name + (d.desc ? ": " + d.desc : "") + " -  Click header to zoom out"
    			: d.name + (d.desc ? ": " + d.desc : "");
  	  }

  	});
  }
});

</script>
