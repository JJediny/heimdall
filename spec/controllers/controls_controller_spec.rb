require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe ControlsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Control. As you add validations to Control, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    FactoryGirl.build(:control).attributes
  }

  let(:invalid_attributes) {
    FactoryGirl.build(:invalid_control).attributes
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ControlsController. Be sure to keep this updated too.
  let(:valid_session) { {} }
  let(:user) { User.create!(email: "user#{rand(100000).to_s}@examples.com", password: '1234567890') }

  context 'User is logged in' do
    before do
      sign_in user
    end

    before(:each) do
      @profile = Profile.find(valid_attributes['profile_id'])
    end

    describe "GET #show" do
      it "returns a success response" do
        control = Control.create! valid_attributes
        get :show, params: {profile_id: control.profile_id, id: control.to_param}, session: valid_session
        expect(response).to be_success
      end
    end

    describe "GET #details" do
      it "returns a success response" do
        control = Control.create! valid_attributes
        get :details, :format => 'js', params: {profile_id: control.profile_id, id: control.to_param}, xhr: true, session: valid_session
        expect(response.content_type).to eq("text/javascript")
      end
    end

    describe "GET #new" do
      it "returns a success response" do
        get :new, params: {profile_id: @profile.id}, session: valid_session
        expect(response).to be_success
      end
    end

    describe "GET #edit" do
      it "returns a success response" do
        control = Control.create! valid_attributes
        get :edit, params: {profile_id: control.profile_id, id: control.to_param}, session: valid_session
        expect(response).to be_success
      end
    end

    describe "POST #create" do
      context "with valid params" do
        it "creates a new Control" do
          expect {
            post :create, params: {profile_id: @profile.id, control: valid_attributes}, session: valid_session
          }.to change(Control, :count).by(1)
        end

        it "redirects to the created control" do
          post :create, params: {profile_id: @profile.id, control: valid_attributes}, session: valid_session
          expect(response).to redirect_to(@profile)
        end
      end

      context "with invalid params" do
        it "returns a success response (i.e. to display the 'new' template)" do
          post :create, params: {profile_id: @profile.id, control: invalid_attributes}, session: valid_session
          #expect(response).to be_success
          skip("Add assertions for invalid params")
        end
      end
    end

    describe "PUT #update" do
      context "with valid params" do
        let(:new_attributes) {
          FactoryGirl.build(:control2).attributes
        }

        it "updates the requested control" do
          control = Control.create! valid_attributes
          title = control.title
          put :update, params: {profile_id: control.profile_id, id: control.to_param, control: new_attributes}, session: valid_session
          control.reload
          expect(control.title).to_not eq(title)
        end

        it "redirects to the control" do
          control = Control.create! valid_attributes
          put :update, params: {profile_id: control.profile_id, id: control.to_param, control: valid_attributes}, session: valid_session
          expect(response).to redirect_to(profile_control_url(@profile, control))
        end
      end

      context "with invalid params" do
        it "returns a success response (i.e. to display the 'edit' template)" do
          control = Control.create! valid_attributes
          put :update, params: {profile_id: control.profile_id, id: control.to_param, control: invalid_attributes}, session: valid_session
          #expect(response).to be_success
          skip("Add assertions for invalid params")
        end
      end
    end

    describe "DELETE #destroy" do
      it "destroys the requested control" do
        control = Control.create! valid_attributes
        expect {
          delete :destroy, params: {profile_id: control.profile_id, id: control.to_param}, session: valid_session
        }.to change(Control, :count).by(-1)
      end

      it "redirects to the controls list" do
        control = Control.create! valid_attributes
        delete :destroy, params: {profile_id: control.profile_id, id: control.to_param}, session: valid_session
        expect(response).to redirect_to(@profile)
      end
    end
  end
end
